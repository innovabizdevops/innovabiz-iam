name: 🚀 Deploy to Production - InnovaBiz CRM Core v4.3.0

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: innovabiz-crm-backend
  ECR_REPOSITORY_FRONTEND: innovabiz-crm-frontend
  ECS_CLUSTER: innovabiz-crm-core-cluster
  ECS_SERVICE_BACKEND: innovabiz-crm-backend-service
  ECS_SERVICE_FRONTEND: innovabiz-crm-frontend-service

jobs:
  # Security & Quality Gates
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend Build & Test
  backend-build:
    name: 🔧 Backend Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run linting
        working-directory: ./backend
        run: npm run lint

      - name: Run tests
        working-directory: ./backend
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ./backend/dist
          key: backend-build-${{ github.sha }}

  # Frontend Build & Test
  frontend-build:
    name: 🎨 Frontend Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run tests
        working-directory: ./frontend
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://api.crm.innovabiz.com
          REACT_APP_VERSION: "4.3.0"
          REACT_APP_ENVIRONMENT: production

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ./frontend/build
          key: frontend-build-${{ github.sha }}

  # Docker Build & Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: ./${{ matrix.component }}/dist
          key: ${{ matrix.component }}-build-${{ github.sha }}
        if: matrix.component == 'backend'

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: ./${{ matrix.component }}/build
          key: ${{ matrix.component }}-build-${{ github.sha }}
        if: matrix.component == 'frontend'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/innovabiz-crm-${{ matrix.component }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/innovabiz-crm-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Infrastructure Deployment
  terraform-deploy:
    name: 🏗️ Infrastructure Deployment
    runs-on: ubuntu-latest
    needs: [docker-build]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./deployment/aws/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./deployment/aws/terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./deployment/aws/terraform
        run: terraform apply -auto-approve tfplan

  # ECS Deployment
  ecs-deploy:
    name: 🚢 ECS Deployment
    runs-on: ubuntu-latest
    needs: [terraform-deploy]
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./deployment/aws/ecs/${{ matrix.component }}-task-definition.json
          container-name: innovabiz-crm-${{ matrix.component }}
          image: ${{ steps.login-ecr.outputs.registry }}/innovabiz-crm-${{ matrix.component }}:${{ github.sha }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: innovabiz-crm-${{ matrix.component }}-service
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # Health Checks & Smoke Tests
  health-checks:
    name: 🔍 Health Checks & Smoke Tests
    runs-on: ubuntu-latest
    needs: [ecs-deploy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB DNS name
        id: alb-dns
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names innovabiz-crm-core-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Wait for deployment
        run: sleep 60

      - name: Health check - Backend API
        run: |
          curl -f -s -o /dev/null -w "%{http_code}" \
            "https://${{ steps.alb-dns.outputs.alb_dns }}/api/health" \
            | grep -q "200" || exit 1

      - name: Health check - Frontend
        run: |
          curl -f -s -o /dev/null -w "%{http_code}" \
            "https://${{ steps.alb-dns.outputs.alb_dns }}/health" \
            | grep -q "200" || exit 1

      - name: Run smoke tests
        run: |
          # API smoke tests
          curl -f "https://${{ steps.alb-dns.outputs.alb_dns }}/api/version"
          curl -f "https://${{ steps.alb-dns.outputs.alb_dns }}/api/contacts" \
            -H "Authorization: Bearer ${{ secrets.TEST_JWT_TOKEN }}"

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [health-checks]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run --vus 50 --duration 2m ./tests/performance/load-test.js
        env:
          K6_API_BASE_URL: https://${{ needs.health-checks.outputs.alb_dns }}

  # Notification
  notify-deployment:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.performance-tests.result == 'success'
        run: |
          echo "🎉 InnovaBiz CRM Core v4.3.0 deployed successfully to production!"
          echo "🌐 Application URL: https://crm.innovabiz.com"
          echo "📊 Dashboard: https://crm.innovabiz.com/dashboard"
          echo "🔗 Integration Hub: https://crm.innovabiz.com/integration"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Check the logs for details."
          exit 1

  # Rollback on Failure
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: failure()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback ECS services
        run: |
          # Rollback to previous task definition
          for service in ${{ env.ECS_SERVICE_BACKEND }} ${{ env.ECS_SERVICE_FRONTEND }}; do
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service $service \
              --force-new-deployment
          done

      - name: Notify rollback
        run: |
          echo "🔄 Automatic rollback initiated due to deployment failure"
          echo "📋 Previous stable version restored"
