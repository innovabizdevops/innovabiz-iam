name: InnovaBiz CRM - CI/CD Pipeline

on:
  push:
    branches: [main, master, develop, release/*]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: innovabiz/crm
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Security and Compliance Checks
  security-scan:
    name: Security & Compliance
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security-check.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'InnovaBiz CRM'
          path: '.'
          format: 'ALL'

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

      - name: Security check status
        id: security-check
        run: echo "status=passed" >> $GITHUB_OUTPUT

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          pnpm run lint:frontend
          pnpm run lint:backend

      - name: Run Prettier check
        run: pnpm run format:check

      - name: Run TypeScript compilation
        run: |
          pnpm run typecheck:frontend
          pnpm run typecheck:backend

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        node-version: ['18', '20']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:frontend --coverage

      - name: Run component tests
        run: pnpm run test:frontend:component

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: ${{ !inputs.skip_tests }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        run: pnpm run migrate:test
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run unit tests
        run: pnpm run test:backend --coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret

      - name: Run integration tests
        run: pnpm run test:backend:integration
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm run build

      - name: Start application
        run: |
          pnpm run start:e2e &
          sleep 30

      - name: Run Playwright tests
        run: pnpm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Build and Push Images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: github.event_name != 'pull_request'
    outputs:
      frontend-image: ${{ steps.image-tags.outputs.frontend-image }}
      backend-image: ${{ steps.image-tags.outputs.backend-image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Set image tags output
        id: image-tags
        run: |
          echo "frontend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "backend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master') && github.event_name != 'pull_request'
    environment:
      name: development
      url: https://crm-dev.innovabiz.com
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: innovabiz/gitops-manifests
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Update development manifests
        run: |
          cd gitops/environments/development/crm

          # Update image tags in Kustomization
          sed -i "s|newTag:.*|newTag: ${{ github.sha }}|g" kustomization.yaml

          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: update CRM development images to ${{ github.sha }}"
          git push

      - name: Wait for ArgoCD sync
        run: |
          echo "Waiting for ArgoCD to sync development environment..."
          sleep 60

      - name: Run smoke tests
        run: |
          curl -f https://crm-dev.innovabiz.com/health || exit 1
          curl -f https://crm-dev.innovabiz.com/api/health || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-development]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name != 'pull_request'
    environment:
      name: staging
      url: https://crm-staging.innovabiz.com
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: innovabiz/gitops-manifests
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Update staging manifests
        run: |
          cd gitops/environments/staging/crm

          # Update image tags in Kustomization
          sed -i "s|newTag:.*|newTag: ${{ github.sha }}|g" kustomization.yaml

          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: update CRM staging images to ${{ github.sha }}"
          git push

      - name: Run staging validation tests
        run: |
          # Wait for deployment
          sleep 120

          # Health checks
          curl -f https://crm-staging.innovabiz.com/health || exit 1
          curl -f https://crm-staging.innovabiz.com/api/health || exit 1

          # API validation
          curl -f https://crm-staging.innovabiz.com/api/docs || exit 1

  # Production Deployment (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name != 'pull_request'
    environment:
      name: production
      url: https://crm.innovabiz.com
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: innovabiz/gitops-manifests
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops

      - name: Create production release PR
        run: |
          cd gitops

          # Create release branch
          git checkout -b "release/crm-${{ github.sha }}"

          # Update production manifests
          cd environments/production/crm
          sed -i "s|newTag:.*|newTag: ${{ github.sha }}|g" kustomization.yaml

          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "feat: deploy CRM ${{ github.sha }} to production"
          git push origin "release/crm-${{ github.sha }}"

          # Create PR
          gh pr create \
            --title "Deploy CRM ${{ github.sha }} to Production" \
            --body "This PR deploys CRM version ${{ github.sha }} to production environment." \
            --base main \
            --head "release/crm-${{ github.sha }}"
        env:
          GH_TOKEN: ${{ secrets.GITOPS_TOKEN }}

  # Notify Teams
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            CRM Deployment Status:
            - Development: ${{ needs.deploy-development.result }}
            - Staging: ${{ needs.deploy-staging.result }}
            - Production: ${{ needs.deploy-production.result }}

            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Microsoft Teams
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run K6 performance tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          BASE_URL: https://crm-staging.innovabiz.com

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json