name: Security Scanning & Compliance

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - container
          - code
          - secrets

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: innovabiz/crm

jobs:
  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect-secrets scan
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
          detect-secrets audit --baseline .secrets.baseline

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          cd ${{ matrix.component }}
          pnpm audit --audit-level high --json > npm-audit-${{ matrix.component }}.json || true

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.component }}/package.json

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'InnovaBiz CRM - ${{ matrix.component }}'
          path: './${{ matrix.component }}'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-${{ matrix.component }}
          path: |
            reports/
            npm-audit-${{ matrix.component }}.json

  # Container Image Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'container' || github.event_name != 'workflow_dispatch'
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build container image
        run: |
          docker build -t test-image:${{ matrix.component }} ./${{ matrix.component }}

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:${{ matrix.component }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.component }}.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'test-image:${{ matrix.component }}'
          severity-cutoff: high
          output-format: sarif
          output-file: grype-${{ matrix.component }}.sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'grype-${{ matrix.component }}.sarif'

      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: 'test-image:${{ matrix.component }}'
          args: --severity-threshold=high

  # Static Code Analysis
  code-security-scan:
    name: Static Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
          generateSarif: "1"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Run ESLint Security
        run: |
          npm install -g eslint eslint-plugin-security
          eslint --ext .js,.ts --format json --output-file eslint-security.json . || true

      - name: Run Bandit (Python security linter)
        if: contains(github.event.repository.language, 'Python')
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload static analysis results
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-results
          path: |
            eslint-security.json
            bandit-report.json

  # Infrastructure as Code Security
  iac-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov (Terraform/K8s security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          only_warn: true
          sarif_upload: true

      - name: Run kube-score
        run: |
          if [ -d "infrastructure/kubernetes" ]; then
            wget -O kube-score https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64
            chmod +x kube-score
            ./kube-score score infrastructure/kubernetes/*.yaml > kube-score-report.txt || true
          fi

      - name: Upload IaC scan results
        uses: actions/upload-artifact@v4
        with:
          name: iac-security-results
          path: |
            kube-score-report.txt

  # Compliance Checks
  compliance-check:
    name: Compliance Assessment
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GDPR Compliance Check
        run: |
          # Check for GDPR compliance patterns
          echo "Checking GDPR compliance..."

          # Look for data processing patterns
          grep -r "personal.*data\|PII\|personally.*identifiable" . \
            --include="*.ts" --include="*.js" --include="*.md" > gdpr-findings.txt || true

          # Check for consent mechanisms
          grep -r "consent\|opt-in\|opt-out" . \
            --include="*.ts" --include="*.js" --include="*.md" >> gdpr-findings.txt || true

          # Check for data retention policies
          grep -r "retention\|delete\|anonymize" . \
            --include="*.ts" --include="*.js" --include="*.md" >> gdpr-findings.txt || true

      - name: SOX Compliance Check
        run: |
          # Check for SOX compliance patterns
          echo "Checking SOX compliance..."

          # Look for audit trails
          grep -r "audit.*log\|audit.*trail" . \
            --include="*.ts" --include="*.js" > sox-findings.txt || true

          # Check for access controls
          grep -r "access.*control\|authorization\|authentication" . \
            --include="*.ts" --include="*.js" >> sox-findings.txt || true

      - name: HIPAA Compliance Check
        run: |
          # Check for HIPAA compliance patterns
          echo "Checking HIPAA compliance..."

          # Look for health information handling
          grep -r "health.*information\|PHI\|medical.*record" . \
            --include="*.ts" --include="*.js" --include="*.md" > hipaa-findings.txt || true

          # Check for encryption
          grep -r "encrypt\|TLS\|SSL" . \
            --include="*.ts" --include="*.js" >> hipaa-findings.txt || true

      - name: Generate compliance report
        run: |
          cat > compliance-report.md << 'EOF'
          # Compliance Assessment Report

          ## GDPR Compliance
          $(cat gdpr-findings.txt | head -20)

          ## SOX Compliance
          $(cat sox-findings.txt | head -20)

          ## HIPAA Compliance
          $(cat hipaa-findings.txt | head -20)

          ## Recommendations
          - Implement comprehensive audit logging
          - Ensure data encryption at rest and in transit
          - Maintain proper access controls
          - Document data processing activities
          - Implement data retention policies
          EOF

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: |
            compliance-report.md
            *-findings.txt

  # Security Score Calculation
  security-score:
    name: Calculate Security Score
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, container-scan, code-security-scan, iac-security-scan, compliance-check]
    if: always() && (github.event.inputs.scan_type == 'full' || github.event_name != 'workflow_dispatch')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Calculate security score
        run: |
          TOTAL_SCORE=100
          DEDUCTIONS=0

          # Secret scan deductions
          if [ "${{ needs.secret-scan.result }}" != "success" ]; then
            DEDUCTIONS=$((DEDUCTIONS + 20))
            echo "Secret scan failed: -20 points"
          fi

          # Dependency scan deductions
          if [ "${{ needs.dependency-scan.result }}" != "success" ]; then
            DEDUCTIONS=$((DEDUCTIONS + 15))
            echo "Dependency scan failed: -15 points"
          fi

          # Container scan deductions
          if [ "${{ needs.container-scan.result }}" != "success" ]; then
            DEDUCTIONS=$((DEDUCTIONS + 15))
            echo "Container scan failed: -15 points"
          fi

          # Code security scan deductions
          if [ "${{ needs.code-security-scan.result }}" != "success" ]; then
            DEDUCTIONS=$((DEDUCTIONS + 25))
            echo "Code security scan failed: -25 points"
          fi

          # IaC security scan deductions
          if [ "${{ needs.iac-security-scan.result }}" != "success" ]; then
            DEDUCTIONS=$((DEDUCTIONS + 15))
            echo "IaC security scan failed: -15 points"
          fi

          # Compliance check deductions
          if [ "${{ needs.compliance-check.result }}" != "success" ]; then
            DEDUCTIONS=$((DEDUCTIONS + 10))
            echo "Compliance check failed: -10 points"
          fi

          FINAL_SCORE=$((TOTAL_SCORE - DEDUCTIONS))

          echo "Security Score: $FINAL_SCORE/100"
          echo "security_score=$FINAL_SCORE" >> $GITHUB_OUTPUT

          # Generate security badge
          if [ $FINAL_SCORE -ge 90 ]; then
            BADGE_COLOR="brightgreen"
            SECURITY_LEVEL="Excellent"
          elif [ $FINAL_SCORE -ge 80 ]; then
            BADGE_COLOR="green"
            SECURITY_LEVEL="Good"
          elif [ $FINAL_SCORE -ge 70 ]; then
            BADGE_COLOR="yellow"
            SECURITY_LEVEL="Fair"
          elif [ $FINAL_SCORE -ge 60 ]; then
            BADGE_COLOR="orange"
            SECURITY_LEVEL="Poor"
          else
            BADGE_COLOR="red"
            SECURITY_LEVEL="Critical"
          fi

          echo "badge_color=$BADGE_COLOR" >> $GITHUB_OUTPUT
          echo "security_level=$SECURITY_LEVEL" >> $GITHUB_OUTPUT

      - name: Create security report
        run: |
          cat > security-report.md << EOF
          # Security Assessment Report

          **Security Score: ${{ steps.security-score.outputs.security_score }}/100**
          **Security Level: ${{ steps.security-score.outputs.security_level }}**

          ## Scan Results Summary
          - Secret Scan: ${{ needs.secret-scan.result }}
          - Dependency Scan: ${{ needs.dependency-scan.result }}
          - Container Scan: ${{ needs.container-scan.result }}
          - Code Security Scan: ${{ needs.code-security-scan.result }}
          - IaC Security Scan: ${{ needs.iac-security-scan.result }}
          - Compliance Check: ${{ needs.compliance-check.result }}

          ## Recommendations
          - Address all high and critical vulnerabilities
          - Implement security best practices
          - Regular security training for development team
          - Automated security testing in CI/CD pipeline

          Generated on: $(date)
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-assessment-report
          path: security-report.md

  # Notification
  notify:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-score]
    if: always()
    steps:
      - name: Notify on critical security issues
        if: needs.security-score.outputs.security_score < 60
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 CRITICAL SECURITY ALERT 🚨
            Security Score: ${{ needs.security-score.outputs.security_score }}/100
            Security Level: ${{ needs.security-score.outputs.security_level }}

            Immediate action required!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security issue
        if: needs.security-score.outputs.security_score < 70
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Security Score Below Threshold: ${{ needs.security-score.outputs.security_score }}/100`;
            const body = `
            ## Security Assessment Results

            **Security Score:** ${{ needs.security-score.outputs.security_score }}/100
            **Security Level:** ${{ needs.security-score.outputs.security_level }}

            ### Failed Scans
            ${context.payload.workflow_run?.conclusion === 'failure' ? 'Multiple security scans failed.' : 'Security score is below acceptable threshold.'}

            ### Action Required
            Please review the security scan results and address identified vulnerabilities.

            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent', 'vulnerability']
            });