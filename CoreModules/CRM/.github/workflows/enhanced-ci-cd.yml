name: INNOVABIZ CRM - Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      e2e: ${{ steps.filter.outputs.e2e }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
            - 'backend/package*.json'
          frontend:
            - 'src/**'
            - 'package*.json'
            - 'vite.config.ts'
            - 'tsconfig.json'
          infrastructure:
            - 'infrastructure/**'
            - 'Dockerfile*'
            - 'docker-compose*.yml'
          e2e:
            - 'tests/e2e/**'
            - 'playwright.config.ts'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  backend-quality:
    name: Backend Quality & Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Environment Setup
      run: |
        cd backend
        cp .env.example .env.test

    - name: Lint and format check
      run: |
        cd backend
        npm run lint
        npm run format:check

    - name: Type check
      run: |
        cd backend
        npm run typecheck

    - name: Security audit
      run: |
        cd backend
        npm audit --audit-level=moderate

    - name: Build
      run: |
        cd backend
        npm run build

    - name: Unit tests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd backend
        npm run test -- --coverage --reporters=default --reporters=jest-junit

    - name: Integration tests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd backend
        npm run test:integration

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Test Results
        path: 'backend/test-results.xml'
        reporter: jest-junit

  frontend-quality:
    name: Frontend Quality & Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint and format check
      run: |
        npm run lint
        npm run format:check

    - name: Type check
      run: npm run typecheck

    - name: Security audit
      run: npm audit --audit-level=moderate

    - name: Unit tests
      run: npm run test -- --coverage --watchAll=false --reporters=default --reporters=jest-junit

    - name: Build
      run: npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Frontend Test Results
        path: 'test-results.xml'
        reporter: jest-junit

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [changes, frontend-quality, backend-quality]
    if: needs.changes.outputs.e2e == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Setup test environment
      run: |
        cd backend
        cp .env.example .env.test
        npm run migrate:test
        npm run seed:test

    - name: Start backend server
      run: |
        cd backend
        npm run start:test &
        sleep 10
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: crm_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Start frontend server
      run: |
        npm run build
        npm run preview &
        sleep 5
      env:
        VITE_API_URL: http://localhost:3001

    - name: Run E2E tests
      run: npx playwright test
      env:
        TEST_BASE_URL: http://localhost:3002

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    if: always() && (needs.backend-quality.result == 'success' || needs.frontend-quality.result == 'success')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies and run tests
      run: |
        npm ci
        npm run test -- --coverage --watchAll=false
        cd backend && npm ci && npm run test -- --coverage

    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-quality, frontend-quality, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.component }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        cd infrastructure/kubernetes

        # Update image tags
        export IMAGE_TAG="${{ github.sha }}"
        envsubst < backend-deployment.yaml | kubectl apply -f -
        envsubst < frontend-deployment.yaml | kubectl apply -f -

        # Apply other manifests
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f ingress.yaml

        # Wait for rollout
        kubectl rollout status deployment/backend -n innovabiz-crm-staging --timeout=600s
        kubectl rollout status deployment/frontend -n innovabiz-crm-staging --timeout=300s

  staging-smoke-tests:
    name: Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium

    - name: Run staging smoke tests
      run: npx playwright test --grep="@smoke"
      env:
        TEST_BASE_URL: https://staging-crm.innovabiz.com

    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: staging-smoke-test-results
        path: test-results/
        retention-days: 7

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, staging-smoke-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        cd infrastructure/kubernetes

        # Update image tags
        export IMAGE_TAG="${{ github.sha }}"
        envsubst < backend-deployment.yaml | kubectl apply -f -
        envsubst < frontend-deployment.yaml | kubectl apply -f -

        # Apply other manifests
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f ingress.yaml

        # Wait for rollout
        kubectl rollout status deployment/backend -n innovabiz-crm --timeout=600s
        kubectl rollout status deployment/frontend -n innovabiz-crm --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n innovabiz-crm
        kubectl get services -n innovabiz-crm
        kubectl get ingress -n innovabiz-crm

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Setup k6
      uses: grafana/setup-k6-action@v1

    - name: Run performance tests
      run: |
        k6 run --out json=performance-results.json tests/performance/load-test.js
      env:
        BASE_URL: https://crm.innovabiz.com

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance-results.json
        retention-days: 30

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, performance-tests]
    if: always()

    steps:
    - name: Notify Slack - Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: |
          ✅ InnovaBiz CRM Pipeline Successful

          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

          🚀 Deployment completed successfully!
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack - Failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: |
          ❌ InnovaBiz CRM Pipeline Failed

          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

          Please check the workflow logs for details.
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create deployment notification
      if: contains(fromJSON('["deploy-staging", "deploy-production"]'), needs.*.result)
      uses: actions/github-script@v7
      with:
        script: |
          const environment = github.ref === 'refs/heads/develop' ? 'staging' : 'production';
          const success = ${{ contains(needs.*.result, 'success') }};

          const body = `
          ## Deployment Notification

          **Environment:** ${environment}
          **Status:** ${success ? '✅ Success' : '❌ Failed'}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Workflow:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ${success ? 'Deployment completed successfully!' : 'Deployment failed. Please check the logs.'}
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Deployment ${success ? 'Success' : 'Failed'}: ${environment} - ${new Date().toISOString().split('T')[0]}`,
            body: body,
            labels: ['deployment', environment, success ? 'success' : 'failure']
          });