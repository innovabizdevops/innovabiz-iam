name: Compliance Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/bureau-credito/compliance/**'
      - 'infrastructure/compliance/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/bureau-credito/compliance/**'
      - 'infrastructure/compliance/**'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Execute análise completa de segurança'
        required: false
        default: 'false'

jobs:
  dependency-check:
    name: Verificar vulnerabilidades de dependências
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci
        working-directory: ./services/bureau-credito

      - name: Executar audit
        run: npm audit --json > npm-audit.json || true

      - name: Executar OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'INNOVABIZ-IAM-Compliance'
          path: './services/bureau-credito'
          format: 'HTML'
          out: './reports'
          args: >
            --enableRetired
            --enableExperimental
            --suppression ./security/suppressions.xml

      - name: Upload relatório de vulnerabilidades
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./reports/dependency-check-report.html

  static-code-analysis:
    name: Análise estática de código
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci
        working-directory: ./services/bureau-credito

      - name: Instalar SonarCloud Scanner
        if: github.event.pull_request.head.repo.fork == false
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=innovabizdevops_innovabiz-iam
            -Dsonar.organization=innovabizdevops
            -Dsonar.sources=./services/bureau-credito/compliance
            -Dsonar.tests=./tests
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
            -Dsonar.exclusions=**/*.test.js,**/*.test.ts,**/*.spec.js,**/*.spec.ts

      - name: Executar ESLint Security
        run: |
          npm install -g eslint @typescript-eslint/parser eslint-plugin-security
          eslint --plugin security --config .eslintrc-security.json --output-file eslint-report.json --format json ./services/bureau-credito/compliance/

      - name: Upload resultados ESLint
        uses: actions/upload-artifact@v3
        with:
          name: eslint-security-report
          path: eslint-report.json

  secrets-scan:
    name: Verificar vazamento de segredos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Executar GitGuardian scan
        uses: GitGuardian/ggshield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.before }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: --show-secrets --verbose

      - name: Executar TruffleHog
        uses: trufflesecurity/trufflehog-actions-scan@master
        with:
          path: ./services/bureau-credito/compliance
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Verificar vulnerabilidades em containers
    runs-on: ubuntu-latest
    if: github.event.inputs.full_scan == 'true' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3

      - name: Build container de teste
        run: |
          docker build -t innovabiz-iam-compliance:${{ github.sha }} -f Dockerfile .
          docker save innovabiz-iam-compliance:${{ github.sha }} -o image.tar

      - name: Executar Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          input: 'image.tar'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload resultados Trivy
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-vulnerability'

  api-security-scan:
    name: Verificar vulnerabilidades de API
    runs-on: ubuntu-latest
    if: github.event.inputs.full_scan == 'true' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci
        working-directory: ./services/bureau-credito

      - name: Iniciar servidor de teste
        run: |
          npm run build
          npm run start:test &
          sleep 15
        working-directory: ./services/bureau-credito

      - name: Executar ZAP Scan
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          target: 'http://localhost:4000/graphql'
          format: 'json'
          fail_action: false
          cmd_options: '-a -j -m 10'

      - name: Upload relatório ZAP
        uses: actions/upload-artifact@v3
        with:
          name: zap-api-scan-report
          path: zap-api-scan.json

  iac-security-scan:
    name: Verificar vulnerabilidades em IaC
    runs-on: ubuntu-latest
    if: github.event.inputs.full_scan == 'true' || github.event_name == 'push'
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3

      - name: Executar Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./deploy
          framework: terraform,kubernetes,dockerfile,cloudformation
          output_format: sarif
          output_file: checkov-results.sarif
          skip_check: CKV_K8S_11,CKV_K8S_38

      - name: Upload resultados Checkov
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif
          category: 'iac-security'

  privacy-compliance-check:
    name: Verificar conformidade de privacidade no código
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositório
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/microsoft/presidio.git
          pip install pylint pylint-pii-checker

      - name: Verificar dados sensíveis com Presidio
        run: |
          python -c "
          from presidio_analyzer import AnalyzerEngine
          from presidio_anonymizer import AnonymizerEngine
          import os
          import json
          import glob

          analyzer = AnalyzerEngine()
          anonymizer = AnonymizerEngine()
          
          results = []
          
          for file_path in glob.glob('./services/bureau-credito/compliance/**/*.ts', recursive=True):
              with open(file_path, 'r', encoding='utf-8') as f:
                  text = f.read()
                  
              analyzer_results = analyzer.analyze(text=text, language='en')
              if analyzer_results:
                  results.append({
                      'file': file_path,
                      'findings': [{'entity_type': r.entity_type, 'start': r.start, 'end': r.end, 'score': r.score} for r in analyzer_results]
                  })
          
          with open('pii-findings.json', 'w') as f:
              json.dump(results, f)
          "

      - name: Verificar plugins de privacidade com Pylint
        run: |
          pylint --load-plugins=pylint_pii_checker --disable=all --enable=pii-checker ./infrastructure/compliance/ || true

      - name: Upload relatórios de privacidade
        uses: actions/upload-artifact@v3
        with:
          name: privacy-compliance-reports
          path: pii-findings.json

  security-report:
    name: Gerar relatório consolidado de segurança
    needs: [dependency-check, static-code-analysis, secrets-scan, privacy-compliance-check]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download todos os artefatos
        uses: actions/download-artifact@v3
        with:
          path: ./security-reports

      - name: Consolidar relatórios
        run: |
          echo "# Relatório de Segurança dos Validadores de Conformidade" > security-summary.md
          echo "Data de execução: $(date)" >> security-summary.md
          echo "Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Verificações Realizadas" >> security-summary.md
          echo "- Análise de Dependências" >> security-summary.md
          echo "- Análise Estática de Código" >> security-summary.md
          echo "- Verificação de Segredos" >> security-summary.md
          echo "- Verificação de Conformidade de Privacidade" >> security-summary.md
          
          if [ "${{ github.event.inputs.full_scan }}" == "true" ] || [ "${{ github.event_name }}" == "push" -a "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "- Análise de Vulnerabilidades em Containers" >> security-summary.md
            echo "- Análise de Segurança de API" >> security-summary.md
          fi
          
          if [ "${{ github.event.inputs.full_scan }}" == "true" ] || [ "${{ github.event_name }}" == "push" ]; then
            echo "- Análise de Segurança em IaC" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Resumo dos Resultados" >> security-summary.md
          echo "Consulte os artefatos individuais para detalhes completos." >> security-summary.md
          
          # Aqui você pode adicionar scripts para processar e resumir os relatórios JSON

      - name: Upload relatório consolidado
        uses: actions/upload-artifact@v3
        with:
          name: security-compliance-summary
          path: security-summary.md

  notify-security-team:
    name: Notificar time de segurança
    needs: [security-report]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Enviar notificação
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: ":warning: Falha em Verificação de Segurança de Conformidade"
          SLACK_MESSAGE: "Foram detectadas vulnerabilidades críticas no componente de validadores de conformidade. Requer atenção imediata."
          SLACK_FOOTER: "INNOVABIZ IAM | Módulo Bureau de Créditos | Compliance Validators"