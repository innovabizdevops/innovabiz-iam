---
# INNOVABIZ IAM Audit Service - Kibana Deployment
# Versão: 1.0.0
# Ano: 2025
# Ambiente: Multi-plataforma, Multi-dimensional e Multi-Contexto
# Alinhado com: ISO 20000, ITIL v4, ISO 27001, NIST SP 800-53, PCI DSS 4.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
    app.kubernetes.io/component: logging
    innovabiz.com/module: iam-audit
    innovabiz.com/tier: observability
data:
  kibana.yml: |
    server.name: kibana
    server.host: "0.0.0.0"
    server.shutdownTimeout: "5s"
    
    elasticsearch.hosts: ["https://elasticsearch:9200"]
    elasticsearch.username: "${ELASTICSEARCH_USERNAME}"
    elasticsearch.password: "${ELASTICSEARCH_PASSWORD}"
    elasticsearch.ssl.verificationMode: none
    
    # Segurança e conformidade
    xpack.security.enabled: true
    xpack.security.session.idleTimeout: "1h"
    xpack.security.session.lifespan: "8h"
    xpack.security.audit.enabled: true
    
    # Funcionalidades
    xpack.reporting.enabled: true
    xpack.reporting.capture.browser.chromium.disableSandbox: true
    xpack.reporting.roles.enabled: false
    
    # Monitoramento e desempenho
    monitoring.ui.container.elasticsearch.enabled: true
    monitoring.ui.container.logstash.enabled: false
    xpack.monitoring.collection.enabled: true
    
    # Customizações para multi-tenant e multi-região
    xpack.spaces.enabled: true
    xpack.maps.showMapsInspectorAdapter: true
    xpack.encryptedSavedObjects.encryptionKey: "${ENCRYPTION_KEY}"
    
    # Observabilidade
    logging.dest: stdout
    logging.json: true
    
    # Configurações de análise para IAM Audit Service
    kibana.index: ".kibana"
    kibana.defaultAppId: "discover"
    
    # Integração com OpenTelemetry
    xpack.apm.enabled: true
    xpack.apm.ui.enabled: true
    apm_oss.apmServerUrl: "http://otel-collector:4317"
    
    # Melhorias de desempenho
    optimize.watch: false
    server.maxPayloadBytes: 5242880
    query.timeout: 30000
    
    # CORS para integração com Grafana
    server.cors: true
    server.cors.origin: ['*']
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kibana
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5601"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5601
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
    app.kubernetes.io/component: logging
    innovabiz.com/module: iam-audit
    innovabiz.com/tier: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kibana
      app.kubernetes.io/part-of: innovabiz-observability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kibana
        app.kubernetes.io/part-of: innovabiz-observability
        app.kubernetes.io/component: logging
        innovabiz.com/module: iam-audit
        innovabiz.com/tier: observability
      annotations:
        checksum/config: "${CONFIG_HASH}"
        prometheus.io/scrape: "true"
        prometheus.io/port: "5601"
    spec:
      serviceAccountName: kibana
      securityContext:
        fsGroup: 1000
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.11.1
        imagePullPolicy: IfNotPresent
        env:
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: elastic-username
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: elastic-password
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: kibana-encryption-key
              key: encryption-key
        - name: INNOVABIZ_TENANT_CONTEXT
          value: "${TENANT_CONTEXT}"
        - name: INNOVABIZ_REGION_CONTEXT
          value: "${REGION_CONTEXT}"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=1024"
        ports:
        - name: http
          containerPort: 5601
          protocol: TCP
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
        readinessProbe:
          httpGet:
            path: /api/status
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /api/status
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 20
          failureThreshold: 3
        resources:
          limits:
            cpu: 1000m
            memory: 1.5Gi
          requests:
            cpu: 200m
            memory: 1Gi
        volumeMounts:
        - name: kibana-config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
        - name: kibana-data
          mountPath: /usr/share/kibana/data
      volumes:
      - name: kibana-config
        configMap:
          name: kibana-config
      - name: kibana-data
        emptyDir: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: kibana-encryption-key
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
type: Opaque
data:
  encryption-key: ${KIBANA_ENCRYPTION_KEY_BASE64}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/auth-type: "basic"
    nginx.ingress.kubernetes.io/auth-secret: "kibana-auth"
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - ${KIBANA_HOST}
    secretName: kibana-tls
  rules:
  - host: ${KIBANA_HOST}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kibana
            port:
              name: http
---
apiVersion: v1
kind: Secret
metadata:
  name: kibana-auth
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
type: Opaque
data:
  auth: ${KIBANA_AUTH_HASH}  # htpasswd -nb admin <password> | base64
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kibana
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
    release: prometheus-operator
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kibana
      app.kubernetes.io/part-of: innovabiz-observability
  namespaceSelector:
    matchNames:
      - iam-system
  endpoints:
  - port: http
    interval: 30s
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kibana
  namespace: iam-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/part-of: innovabiz-observability
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kibana
      app.kubernetes.io/part-of: innovabiz-observability